package com.elbekd.bot.feature.chain

import com.elbekd.bot.Bot
import com.elbekd.bot.types.Message
import java.util.*

public class ChainBuilder private constructor(
    private val bot: Bot,
    private val label: String,
    private val predicate: suspend (Message) -> Boolean,
    private val action: suspend (Message) -> Unit
) {

    private constructor(bot: Bot, trigger: String, triggerAction: suspend (Message) -> Unit) : this(
        bot,
        trigger,
        predicate = { msg: Message -> msg.text == trigger },
        action = triggerAction
    )

    private val chainList = LinkedList<Chain.Node>().apply {
        add(Chain.Node(label, false, action))
    }

    /**
     * Adds the next step for the chain. Steps are executed in the
     * order you add them.
     * @param label a label of the step. If null then label is
     *              generated by builder. Default is `null`
     * @param isTerminal if true then chain terminates on the current step.
     *                   Default is `false`
     * @param action an action for the current step
     * @return [ChainBuilder]
     */
    public fun then(
        label: String? = null,
        isTerminal: Boolean = false,
        action: suspend (Message) -> Unit
    ): ChainBuilder = apply {
        val nodeLabel = label ?: createNextLabel()
        val node = Chain.Node(nodeLabel, isTerminal, action)
        chainList.last().next = node
        chainList.add(node)
    }

    /**
     * Builds the [Chain].
     * @return [Chain]
     */
    public fun build(): Chain {
        val chain = Chain(label, predicate, chainList)
        bot.registerChain(chain)
        return chain
    }

    private fun createNextLabel() = "$label-${chainList.size}"

    internal companion object {
        fun with(bot: Bot, trigger: String, action: suspend (Message) -> Unit) = ChainBuilder(bot, trigger, action)

        fun with(bot: Bot, label: String, predicate: suspend (Message) -> Boolean, action: suspend (Message) -> Unit) =
            ChainBuilder(bot, label, predicate, action)
    }
}